name: Backend CI

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-west-1

jobs:
  tests:
    name: Run lib tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          cache: "pip"
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ./functions

      - name: Run lib tests
        run: |
          python -m unittest discover -s ./tests/test_lib -p 'test_*.py'
        working-directory: ./functions

  deploy_ecr:
    name: Deploy ECR
    runs-on: ubuntu-latest
    needs: run_lib_tests
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy (ECR) with Terraform
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: ./terraform/ecr

      - name: Output ECR Repository Name
        id: set_output
        run: |
          echo "::set-output name=ECR_REPOSITORY_NAME::$(terraform output -raw ecr_repository_name)"
        working-directory: ./terraform/ecr

    outputs:
      ecr_repository_name: ${{ steps.set_output.outputs.ECR_REPOSITORY_NAME }}

  deploy_api:
    name: Deploy API
    needs: [run_lib_tests, deploy_ecr]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO_NAME: ${{ needs.deploy_ecr.outputs.ecr_repository_name }}
          IMAGE_SHA_TAG: ${{ github.sha }}
        run: |
          docker buildx build --provenance=false --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPO_NAME:authorizer_$IMAGE_SHA_TAG -f functions/authorizer/Dockerfile . --push
          docker buildx build --provenance=false --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPO_NAME:get_handler_$IMAGE_SHA_TAG -f functions/get_handler/Dockerfile . --push
          docker buildx build --provenance=false --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPO_NAME:ingest_handler_$IMAGE_SHA_TAG -f functions/ingest_handler/Dockerfile . --push

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy API, S3
        run: |
          terraform init
          terraform apply -auto-approve
        env:
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_ecr_repository_url: "${{ steps.login-ecr.outputs.registry }}/${{ needs.deploy_ecr.outputs.ecr_repository_name }}"
        working-directory: ./terraform/api
